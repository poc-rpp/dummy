{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@zxing/ngx-scanner/lib/browser-multi-format-continuous-reader.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.component.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__read","o","m","r","i","ar","error","__spread","arguments","concat","BrowserMultiFormatContinuousReader","_this","_super","_isTorchAvailable","BehaviorSubject","undefined","__","constructor","prototype","create","tslib_1.__extends","defineProperty","asObservable","continuousDecodeFromInputVideoDevice","deviceId","videoSource","reset","navigator","scan$","getStreamForDevice","stream","attachStreamToVideoAndCheckTorch","videoElement","decodeOnSubject","timeBetweenScansMillis","_setScanStream","_a","constraints","getUserMediaConstraints","mediaDevices","getUserMedia","_b","video","facingMode","exact","setTorch","on","tracks","getVideoTracks","applyTorchOnTracks","restart","updateTorchCompatibility","attachStreamToVideo","tracks_1","tracks_1_1","track","isTorchCompatible","compatible","ImageCapture","getPhotoCapabilities","capabilities","fillLightMode","state","forEach","applyConstraints","advanced","torch","_cleanScanStream","scanStream","isStopped","complete","delay","decode","NotFoundException","ChecksumException","FormatException","setTimeout","BrowserMultiFormatReader","ZXingScannerComponent","previewFitMode","autostarted","EventEmitter","autostarting","torchCompatible","scanSuccess","scanFailure","scanError","scanComplete","camerasFound","camerasNotFound","permissionResponse","hasDevices","deviceChange","_device","_enabled","_hints","Map","autofocusEnabled","autostart","formats","BarcodeFormat","QR_CODE","hasNavigator","isMediaDevicesSuported","_codeReader","device","ArgumentException","isCurrentDevice","console","warn","isAutostarting","hasPermission","_reset","scanFromDevice","hints","get","DecodeHintType","POSSIBLE_FORMATS","input","Error","map","getBarcodeFormatOrFail","set","_isAutostarting","getCodeReader","enabled","Boolean","TRY_HARDER","enable","delete","askForPermission","setPermission","getAnyVideoDevice","permission","handlePermissionException","err_1","terminateStream","getTracks","stop","initAutostartOff","updateVideoInputDevices","initAutostartOn","e_1","devices","autostartScanner","ngAfterViewInit","isTorchAvailable","subscribe","x","emit","ngOnDestroy","prevDevice","listVideoInputDevices","find","test","dispatchScanSuccess","getText","dispatchScanFailure","reason","dispatchScanError","dispatchScanComplete","err","name","message","format","trim","toUpperCase","previewElemRef","nativeElement","decodingStream","_onDecodeResult","_onDecodeError","log","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","static","Input","Output","ZXingScannerModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/// <reference path=\"./image-capture.d.ts\" />\r\n\r\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Exposes _tochAvailable .\r\n   */\r\n  public get isTorchAvailable(): Observable<boolean> {\r\n    return this._isTorchAvailable.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Says if there's a torch available for the current device.\r\n   */\r\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * The device id of the current media device.\r\n   */\r\n  private deviceId: string;\r\n\r\n  /**\r\n   * If there's some scan stream open, it shal be here.\r\n   */\r\n  private scanStream: BehaviorSubject<ResultAndError>;\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param callbackFn The callback to be executed after every scan attempt\r\n   * @param deviceId The device's to be used Id\r\n   * @param videoSource A new video element\r\n   */\r\n  public continuousDecodeFromInputVideoDevice(\r\n    deviceId?: string,\r\n    videoSource?: HTMLVideoElement\r\n  ): Observable<ResultAndError> {\r\n\r\n    this.reset();\r\n\r\n    // Keeps the deviceId between scanner resets.\r\n    if (typeof deviceId !== 'undefined') {\r\n      this.deviceId = deviceId;\r\n    }\r\n\r\n    if (typeof navigator === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n\r\n    try {\r\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\r\n      this.getStreamForDevice({ deviceId })\r\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\r\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\r\n    } catch (e) {\r\n      scan$.error(e);\r\n    }\r\n\r\n    this._setScanStream(scan$);\r\n\r\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\r\n\r\n    return scan$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets the media stream for certain device.\r\n   * Falls back to any available device if no `deviceId` is defined.\r\n   */\r\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\r\n    const constraints = this.getUserMediaConstraints(deviceId);\r\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n    return stream;\r\n  }\r\n\r\n  /**\r\n   * Creates media steram constraints for certain `deviceId`.\r\n   * Falls back to any environment available device if no `deviceId` is defined.\r\n   */\r\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\r\n\r\n    const video = typeof deviceId === 'undefined'\r\n      ? { facingMode: { exact: 'environment' } }\r\n      : { deviceId: { exact: deviceId } };\r\n\r\n    const constraints: MediaStreamConstraints = { video };\r\n\r\n    return constraints;\r\n  }\r\n\r\n  /**\r\n   * Enables and disables the device torch.\r\n   */\r\n  public setTorch(on: boolean): void {\r\n\r\n    if (!this._isTorchAvailable.value) {\r\n      // compatibility not checked yet\r\n      return;\r\n    }\r\n\r\n    const tracks = this.getVideoTracks(this.stream);\r\n\r\n    if (on) {\r\n      this.applyTorchOnTracks(tracks, true);\r\n    } else {\r\n      this.applyTorchOnTracks(tracks, false);\r\n      // @todo check possibility to disable torch without restart\r\n      this.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the torch compatibility state and attachs the stream to the preview element.\r\n   */\r\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\r\n    this.updateTorchCompatibility(stream);\r\n    return this.attachStreamToVideo(stream, videoSource);\r\n  }\r\n\r\n  /**\r\n   * Checks if the stream supports torch control.\r\n   *\r\n   * @param stream The media stream used to check.\r\n   */\r\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\r\n\r\n    const tracks = this.getVideoTracks(stream);\r\n\r\n    for (const track of tracks) {\r\n      if (await this.isTorchCompatible(track)) {\r\n        this._isTorchAvailable.next(true);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param stream The video stream where the tracks gonna be extracted from.\r\n   */\r\n  private getVideoTracks(stream: MediaStream) {\r\n    let tracks = [];\r\n    try {\r\n      tracks = stream.getVideoTracks();\r\n    }\r\n    finally {\r\n      return tracks || [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param track The media stream track that will be checked for compatibility.\r\n   */\r\n  private async isTorchCompatible(track: MediaStreamTrack) {\r\n\r\n    let compatible = false;\r\n\r\n    try {\r\n      const imageCapture = new ImageCapture(track);\r\n      const capabilities = await imageCapture.getPhotoCapabilities();\r\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\r\n    }\r\n    finally {\r\n      return compatible;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the torch setting in all received tracks.\r\n   */\r\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\r\n    tracks.forEach(track => track.applyConstraints({\r\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Correctly sets a new scanStream value.\r\n   */\r\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\r\n    // cleans old stream\r\n    this._cleanScanStream();\r\n    // sets new stream\r\n    this.scanStream = scan$;\r\n  }\r\n\r\n  /**\r\n   * Cleans any old scan stream value.\r\n   */\r\n  private _cleanScanStream(): void {\r\n\r\n    if (this.scanStream && !this.scanStream.isStopped) {\r\n      this.scanStream.complete();\r\n    }\r\n\r\n    this.scanStream = null;\r\n  }\r\n\r\n  /**\r\n   * Decodes values in a stream with delays between scans.\r\n   *\r\n   * @param scan$ The subject to receive the values.\r\n   * @param videoElement The video element the decode will be applied.\r\n   * @param delay The delay between decode results.\r\n   */\r\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\r\n\r\n    // stops loop\r\n    if (scan$.isStopped) {\r\n      return;\r\n    }\r\n\r\n    let result: Result;\r\n\r\n    try {\r\n      result = this.decode(videoElement);\r\n      scan$.next({ result });\r\n    } catch (error) {\r\n      // stream cannot stop on fails.\r\n      if (\r\n        !error ||\r\n        // scan Failure - found nothing, no error\r\n        error instanceof NotFoundException ||\r\n        // scan Error - found the QR but got error on decoding\r\n        error instanceof ChecksumException ||\r\n        error instanceof FormatException\r\n      ) {\r\n        scan$.next({ error });\r\n      } else {\r\n        scan$.error(error);\r\n      }\r\n    } finally {\r\n      const timeout = !result ? 0 : delay;\r\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restarts the scanner.\r\n   */\r\n  private restart(): Observable<ResultAndError> {\r\n    // reset\r\n    // start\r\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\r\n  }\r\n\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  NgZone\r\n} from '@angular/core';\r\n\r\nimport {\r\n  ArgumentException,\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\n\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSuported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean | null>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element shoud be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Emitts events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emitts events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emitts events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emitts events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | null) {\r\n\r\n    if (!device && device !== null) {\r\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      // return;\r\n    }\r\n\r\n    // in order to change the device the codeReader gotta be reseted\r\n    this._reset();\r\n\r\n    this._device = device;\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device !== null) {\r\n      this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device acessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n\r\n    this._hints = hints;\r\n\r\n    // @note avoid restarting the code reader when possible\r\n\r\n    // new instance with new hints.\r\n    this.restart();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean | null) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutstarting(): boolean | null {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Allow start scan or not.\r\n   */\r\n  @Input()\r\n  set torch(on: boolean) {\r\n    this.getCodeReader().setTorch(on);\r\n  }\r\n\r\n  /**\r\n   * Allow start scan or not.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n    } else if (this.device) {\r\n      this.scanFromDevice(this.device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter();\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._device = null;\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cammeras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSuported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = null;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      this.autostartScanner([...devices]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device: MediaDeviceInfo) {\r\n    return this.device && device && device.deviceId === this.device.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executed after the view initialization.\r\n   */\r\n  ngAfterViewInit(): void {\r\n\r\n    // makes torch availability information available to user\r\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\r\n\r\n    if (!this.autostart) {\r\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      return;\r\n    }\r\n\r\n    // configurates the component and starts the scanner\r\n    this.initAutostartOn();\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    // @note apenas necessario por enquanto causa da Torch\r\n    this._codeReader = undefined;\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next();\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private autostartScanner(devices: MediaDeviceInfo[]) {\r\n\r\n    const matcher = ({ label }) => /back|trÃ¡s|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    this.device = device;\r\n    // @note when listening to this change, callback code will sometimes run before the previous line.\r\n    this.deviceChange.emit(device);\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Retorna um code reader, cria um se nenhume existe.\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private scanFromDevice(deviceId: string): void {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\r\n\r\n    if (!decodingStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => { this.reset(); console.log('completed'); };\r\n\r\n    decodingStream.subscribe(next, error, complete);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    const device = this.device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this._device = null;\r\n\r\n    this._codeReader.reset();\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emmits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n"]}